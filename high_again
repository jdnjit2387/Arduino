//Final program
#include <AFMotor.h> //import your motor shield library

#define trigPin1 16 // define the pins of your sensor
#define echoPin1 17
#define trigPin2 18// define the pins of your sensor
#define echoPin2 19

#define trigPin_side 14
#define echoPin_side 15

AF_DCMotor motor1(1); // set up motors.
AF_DCMotor motor2(2);
AF_DCMotor motor3(3); // set up motors.
AF_DCMotor motor4(4);

long duration, distance,distance2,distance1,distance_side, RearSensor,FrontSensor,SideSensor;
int flag=1;
int parking =0;
  int m1_speed = 180;
  int m2_speed = 180;
  int m3_speed = 240;
  int m4_speed = 240;
  int power=0;
  boolean runOnce=false,runOnce1=false;
  int turn_cnt=0;
  int highway=0;
  int key_data=0;

void setup() 
{
  Serial.begin(9600); // begin serial communitication  
  Serial.println("Motor test!");
  pinMode(trigPin1, OUTPUT);// set the trig pin to output (Send sound waves)
  pinMode(echoPin1, INPUT);// set the echo pin to input (recieve sound waves)
  pinMode(trigPin2, OUTPUT);// set the trig pin to output (Send sound waves)
  pinMode(echoPin2, INPUT);// set the echo pin to input (recieve sound waves)
  pinMode(trigPin_side,OUTPUT);
  pinMode(echoPin_side,INPUT);
}

void loop() 
{
  
 SonarSensor(trigPin1,echoPin1);
  FrontSensor = distance;
  distance1 = FrontSensor;
  
  SonarSensor(trigPin2, echoPin2);
  RearSensor = distance;
  distance2 = RearSensor;

  SonarSensor(trigPin_side, echoPin_side);    //side sensor for parking
  SideSensor = distance;
  distance_side = SideSensor;

  Serial.println ("Front sensor = ");
  Serial.println (distance1);
  Serial.println ("Back sensor = ");
  Serial.println (distance2);
  Serial.println ("Side sensor = ");
  Serial.println (distance_side);

  if(distance1 < 25 && flag==1)
  {
    motor1.run(RELEASE); 
    motor2.run(RELEASE);
    motor3.run(RELEASE); 
    motor4.run(RELEASE);
  }

  if(distance2 < 25 && flag==2)
  {
    motor1.run(RELEASE);
    motor2.run(RELEASE);
    motor3.run(RELEASE); 
    motor4.run(RELEASE);
   }

if(distance_side > 20 && parking==1)
  {
if(runOnce==false)
  {
    motor1.run(RELEASE);
    motor2.run(RELEASE);
    motor3.run(RELEASE); 
    motor4.run(RELEASE);
    delay(1000);
    runOnce=true;
  }
    if(turn_cnt<18)
    {
      //turn to the left
      flag=0;
      turn_left();
      turn_cnt++;
    }
   else
     {
      if(runOnce1==false)
      {
        motor1.run(RELEASE);
        motor2.run(RELEASE);
        motor3.run(RELEASE); 
        motor4.run(RELEASE);
        delay(1000);
        runOnce1=true;
      }
      else
        {
          flag=1;
             if(distance1 < 25 && flag==1)
              {
              motor1.run(RELEASE); 
              motor2.run(RELEASE);
              motor3.run(RELEASE); 
              motor4.run(RELEASE);
              }
              else
               {  
                move_forward();
               }
        }
    }
}

//Code for highway safety
if(highway==1)
{line_follower();}
//end of line follower
   
if (Serial.available() > 0)
{
int data = Serial.read();
key_data=data;              //for highway safety program

switch (data) {
case '1':  parking=0;highway=0;turn_cnt=0;runOnce=false,runOnce1=false;
     flag=1;
    if(power==0)            //4 wheel drive: go forward
     { 
      Serial.println ("No obstacle detected. going forward");
      motor1.setSpeed(m1_speed); 
      motor2.setSpeed (m2_speed); 
      motor3.setSpeed(m3_speed); 
      motor4.setSpeed (m4_speed);
      motor1.run(FORWARD); 
      motor2.run(FORWARD);  
      motor3.run(BACKWARD);  
      motor4.run (BACKWARD);
     }
    else                  //2 wheel drive: go forward
     {
        motor1.run(RELEASE);
        motor4.run(RELEASE);
        motor2.setSpeed(m2_speed); 
        motor3.setSpeed(m3_speed); 
        motor2.run(FORWARD);  
        motor3.run(BACKWARD);
     }
   
  break;
  
case '2' :flag=2;parking=0;highway=0;turn_cnt=0;runOnce=false,runOnce1=false;
if(power==0)    //4wheel drive: go backward
    {
        Serial.println ("No obstacle detected. going backward");
        motor1.setSpeed(m1_speed); 
        motor2.setSpeed (m2_speed); 
        motor3.setSpeed(m3_speed); 
        motor4.setSpeed (m4_speed);
        motor1.run(BACKWARD); 
        motor2.run(BACKWARD);  
        motor3.run(FORWARD);  
        motor4.run (FORWARD);
    }
    else
      {
        motor1.run(RELEASE);
        motor4.run(RELEASE);
        
        motor2.setSpeed(m2_speed); 
        motor3.setSpeed(m3_speed); 
        motor2.run(BACKWARD);  
        motor3.run(FORWARD);
      }
   
break;

case '3' : flag=1;parking=0;highway=0;turn_cnt=0;runOnce=false,runOnce1=false;
if(power==0)              //4 wheel drive
  {
      motor1.setSpeed(255); 
      motor2.setSpeed (255); 
      motor1.run(FORWARD);  
      motor2.run (FORWARD);
      motor3.run(RELEASE); 
      motor4.run(RELEASE);
  }
  else                    //2 wheel drive 
   {
      motor1.setSpeed(255); 
      motor1.run(FORWARD); 
      
      motor2.run (RELEASE);
      motor3.run(RELEASE); 
      motor4.run(RELEASE);
   }  

break;

case '4' : flag=1;parking=0;highway=0;turn_cnt=0;runOnce=false,runOnce1=false;
 if(power==0)                  //4 wheel drive
  {
    motor3.setSpeed(255); 
    motor4.setSpeed (255); 
    motor3.run(BACKWARD);  
    motor4.run (BACKWARD);
    motor1.run(RELEASE);
    motor2.run(RELEASE);
  }
  else                          //2 wheel drive
   {
    motor4.setSpeed (255); 
    motor4.run(BACKWARD);  

    motor1.run(RELEASE);
    motor2.run(RELEASE);
    motor3.run(RELEASE);
   }

     break;
     
case '5': parking=0;highway=0;turn_cnt=0;runOnce=false,runOnce1=false; 
    motor1.run(RELEASE);
    motor2.run(RELEASE);
      motor3.run(RELEASE); //set the speed of the motors, between 0-255
      motor4.run(RELEASE);
      Serial.println(data);
      break;

case '6': flag=1;         //Call parking function
parking=1;
parking_assist();
  break;
      
 case '7':parking=0;highway=0;turn_cnt=0;runOnce=false,runOnce1=false; 
      if(power==0)
        power=1;
      else if(power==1)
        power=0;
break;

case '8':parking=0;turn_cnt=0;runOnce=false,runOnce1=false;     //Highway safety
     flag=1;
     if(highway==0)
       highway=1;
     else if(highway==1)
       {
        highway=0;  
       motor1.run(RELEASE);
       motor2.run(RELEASE);
       motor3.run(RELEASE); //set the speed of the motors, between 0-255
       motor4.run(RELEASE);
       }
break;

default : break;


}
}
else
{Serial.println("Serial unavailable");}
}

void SonarSensor(int trigPin,int echoPin)
{
digitalWrite(trigPin, LOW);
delayMicroseconds(2);
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);
duration = pulseIn(echoPin, HIGH);
distance = (duration/2) / 29.1;
 
}

void parking_assist()
{
  motor1.setSpeed(m1_speed); 
    motor2.setSpeed (m2_speed); 
    motor3.setSpeed(m3_speed); 
    motor4.setSpeed (m4_speed);
    motor1.run(FORWARD); 
    motor2.run(FORWARD);  
    motor3.run(BACKWARD);  
    motor4.run (BACKWARD);
}

void turn_left()
{
     //turning 360
  motor1.setSpeed(m1_speed+25);
  motor2.setSpeed(m2_speed+25);
  motor3.setSpeed(m3_speed-50);
  motor4.setSpeed(m4_speed-50);
  motor1.run(FORWARD);
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);
}

void move_forward()
{
    
    motor1.setSpeed(m1_speed); 
    motor2.setSpeed (m2_speed); 
    motor3.setSpeed(m3_speed); 
    motor4.setSpeed (m4_speed);
    motor1.run(FORWARD); 
    motor2.run(FORWARD);  
    motor3.run(BACKWARD);  
    motor4.run (BACKWARD);
}

void line_follower()
{ 
    int lsensor=digitalRead(2);
    int rsensor=digitalRead(13);

    if(key_data=='5' || distance1 < 25)
    {
      motor1.run(RELEASE);
      motor2.run(RELEASE);
      motor3.run(RELEASE); //set the speed of the motors, between 0-255
      motor4.run(RELEASE);
    }
else
{    
  if((lsensor==HIGH)&&(rsensor==HIGH))
  {
  //both sensors on white
  // go forward
  motor1.setSpeed(m1_speed); //set the speed of the motors, between 0-255
  motor2.setSpeed (m2_speed); 
  motor3.setSpeed(m3_speed); //set the speed of the motors, between 0-255
  motor4.setSpeed (m4_speed);
   motor1.run(FORWARD); //if there's no obstacle ahead, Go Forward! 
    motor2.run(FORWARD);  
    motor3.run(BACKWARD);  // Turn as long as there's an obstacle ahead.
    motor4.run (BACKWARD);
  }

  else if((lsensor==HIGH)&& (rsensor==LOW))
  {
  //right sensor on black line
  // turn right
    motor3.setSpeed(255); //set the speed of the motors, between 0-255
    motor4.setSpeed (255); 
    motor3.run(BACKWARD);  // Turn as long as there's an obstacle ahead.
    motor4.run (BACKWARD);
    motor1.run(RELEASE);
    motor2.run(RELEASE);
  }

  else if((lsensor==LOW)&&(rsensor==HIGH))
  {
  //left sensor on black line
  // turn left
    motor1.setSpeed(200); //set the speed of the motors, between 0-255
    motor2.setSpeed (200); 
    motor1.run(FORWARD);  // Turn as long as there's an obstacle ahead.
    motor2.run (FORWARD);
    motor3.run(RELEASE); //if there's no obstacle ahead, Go Forward! 
    motor4.run(RELEASE);  
  }
  
  else
  {
    motor1.run(RELEASE);
    motor2.run(RELEASE);
    motor3.run(RELEASE); //set the speed of the motors, between 0-255
    motor4.run(RELEASE);
  }
}
}
